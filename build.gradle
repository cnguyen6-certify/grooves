buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.gradle:build-scan-plugin:1.6'
        classpath 'me.champeau.gradle:buildscan-recipes-plugin:0.2.0'
        classpath 'fr.jcgay:gradle-notifier:1.1.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.3'
        classpath 'com.netflix.nebula:nebula-release-plugin:4.2.0'
    }
}

apply plugin: 'com.gradle.build-scan'
apply plugin: 'me.champeau.buildscan-recipes'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'org.sonarqube'
apply plugin: 'nebula.nebula-release'
apply plugin: fr.jcgay.gradle.notifier.GradleNotifierPlugin

allprojects {
    group = 'com.github.rahulsom'
}

subprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'checkstyle'

    checkstyle {
        configFile = rootProject.file('gradle/checkstyle/checkstyle.xml')
        toolVersion = "7.6.1"
        showViolations = false
        maxWarnings = 0
        maxErrors = 0
    }
}

tasks.release.dependsOn 'grooves-api:uploadArchives',
        'grooves-groovy:uploadArchives',
        'grooves-gorm:uploadArchives',
        'grooves-types:uploadArchives'

project.afterEvaluate {
    project.tasks.findByName('closeAndPromoteRepository').mustRunAfter 'grooves-api:uploadArchives',
            'grooves-groovy:uploadArchives',
            'grooves-gorm:uploadArchives'

    if (!version.toString().endsWith('-SNAPSHOT')) {
        tasks.release.dependsOn 'closeAndPromoteRepository'
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

buildScanRecipes {
    recipes 'git-commit', 'git-status', 'travis-ci', 'gc-stats'
}

nexusStaging {
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 30
}
